{"version":3,"file":"js/4.bb899ce6.js","mappings":"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","sources":["webpack://conradswebsite/./src/components/SortingAlgorithms/FastQuickSort.vue","webpack://conradswebsite/./src/components/SortingAlgorithms/FastQuickSort.vue?adfc","webpack://conradswebsite/./src/views/projects/DatasetsView.vue","webpack://conradswebsite/./src/views/projects/DatasetsView.vue?349e"],"sourcesContent":["\r\n<script>\r\nexport default {\r\n    name: 'FastQuickSort',\r\n    // Your component's JavaScript logic goes here\r\n    data(){\r\n        return{\r\n        \r\n        }\r\n    },\r\n    methods:{\r\n        invoke(array = []){\r\n            let theArray = array\r\n                \r\n                //const toSort = quickSort(theArray, 0, theArray.length-1)\r\n                const toSort = this.getQuickSort(theArray, 0, theArray.length-1);       \r\n                \r\n                return toSort;\r\n        },\r\n        getQuickSort(input, low, high) {            \r\n        \r\n\r\n                /*\r\n                    Quicksort is the most popular sorting algorithm and there have\r\n                    lots of different implementations but the \"recursive\" or \"Partition in place\"\r\n                    is one of the most efficient implementations below we have discussed how to\r\n                    implement it.\r\n\r\n                    Partition in place => \"in place\" Partition in place indicates that we\r\n                    do not need any other space to store the auxiliary array and the term\r\n                    \"partition\" denotes that we split the list into two parts one is less\r\n                    than the pivot and the other is greater than the pivot and repeats this\r\n                    process recursively and breaks the problem into sub-problems and makes\r\n                    it singular so that the behavior or \"divide and conquer\" get involved\r\n                    too.\r\n\r\n                    Problem & Source of Explanation => https://www.cs.auckland.ac.nz/software/AlgAnim/qsort1a.html\r\n\r\n                    As found here https://github.com/TheAlgorithms/JavaScript/blob/master/Sorts/QuickSortRecursive.js\r\n                */\r\n\r\n                /**\r\n                 * Partition in place QuickSort.\r\n                 * @param {number[]} inputList list of values.\r\n                 * @param {number} low lower index for partition.\r\n                 * @param {number} high higher index for partition.\r\n                 */\r\n                const quickSort = (inputList, low, high) => {\r\n                if (!Array.isArray(inputList)) {\r\n                    throw new TypeError('Please input a valid list or array.')\r\n                }\r\n                \r\n                if (low < high) {\r\n                    // get the partition index.\r\n                    const pIndex = partition(inputList, low, high)\r\n                    // recursively call the quickSort method again.\r\n                    quickSort(inputList, low, pIndex - 1)\r\n                    quickSort(inputList, pIndex + 1, high)\r\n                    \r\n                }\r\n                return inputList\r\n                }\r\n\r\n                /**\r\n                 * Partition In Place method.\r\n                 * @param {number[]} partitionList list for partitioning.\r\n                 * @param {number} low lower index for partition.\r\n                 * @param {number} high higher index for partition.\r\n                 * @returns {number} `pIndex` pivot index value.\r\n                 */\r\n                const partition = (partitionList, low, high) => {\r\n                const pivot = partitionList[high]\r\n                let pIndex = low\r\n                for (let index = low; index <= high - 1; index++) {\r\n                    if (partitionList[index] < pivot) {\r\n                    // swap variables using array destructuring\r\n                    [partitionList[index], partitionList[pIndex]] = [partitionList[pIndex], partitionList[index]]\r\n                    pIndex += 1\r\n                    }\r\n                }\r\n                [partitionList[pIndex], partitionList[high]] = [partitionList[high], partitionList[pIndex]]\r\n                return pIndex\r\n                }\r\n\r\n                const sortedList = quickSort(input, low, high)\r\n                //console.log(sortedList)\r\n                return sortedList;\r\n                    \r\n                }\r\n            }\r\n        }\r\n</script>\r\n\r\n<style scoped>\r\n/* Your component's CSS goes here */\r\n\r\n</style>\r\n","import script from \"./FastQuickSort.vue?vue&type=script&lang=js\"\nexport * from \"./FastQuickSort.vue?vue&type=script&lang=js\"\n\nimport \"./FastQuickSort.vue?vue&type=style&index=0&id=1cae36b8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1cae36b8\"]])\n\nexport default __exports__","\r\n<template>\r\n  <div style=\"padding-top: 2.7em; background-color: rgb(93, 76, 29); padding-bottom: 1em;\">\r\n\r\n    <h2 style=\"\" class=\"homeview\"><span style=\"background-color: rgb(255, 255, 255); border-radius: 0.25em; padding: 0.2em;\">Coffee Consumers\r\n      by country</span></h2>\r\n    \r\n    <div style=\"margin-left: 8px; margin-right: 8px; text-align: left; width: width: calc(100% - 16px);\">\r\n\r\n      <div id=\"chartContainer\"></div>\r\n    </div>\r\n    <h4 style=\"margin-top: 0.3em; text-align: left; margin-left: 0.5em; margin-right: 0.5em; color: #fff;\">\r\n      <b class=\"main-red-color\">Note:</b> click on the column titles in the table below for each column to sort data\r\n      numerically/alphabetically. The graph will update to the sorted values.\r\n      All 0 values are removed for the column that is sorted. The graph now uses an SVG format output.</h4>\r\n\r\n    <table style=\"margin-top: 1em;\">\r\n      <thead>\r\n        <tr>\r\n          <th style=\"cursor: pointer;\" @click=\"sortData('country')\">Country</th>\r\n          <th class=\"table-column-buttons\" style=\"cursor: pointer;\"\r\n            @click=\"removeZeros('perCapitaCons2016'), sortData('perCapitaCons2016'), barChart('perCapitaCons2016', 'Coffee Consumption Per Capita 2016 (kg)')\">\r\n            Coffee Consumption per Capita 2016 (kg)</th>\r\n          <th class=\"table-column-buttons\" style=\"cursor: pointer;\"\r\n            @click=\"removeZeros('totCons2019'), sortData('totCons2019'), barChart('totCons2019', 'Dry coffee beans 2019 (kg)')\">\r\n            Dry coffee beans 2019 (kg)</th>\r\n          <th style=\"cursor: pointer;\" @click=\"sortData('region')\">Region</th>\r\n          <th class=\"table-column-buttons\" style=\"cursor: pointer;\"\r\n            @click=\"sortData('pop2023'), barChart('pop2023', 'Population 2023')\">Population 2023</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(item, key) in sortedData\" :key=\"key\">\r\n          <td>{{ item.country }}</td>\r\n          <td>{{ Math.round(item.perCapitaCons2016 * 100 / 2.20462) / 100 }}</td>\r\n          <td>{{ addCommas(Math.round((item.totCons2019 * 60000) * 100 / 2.20462) / 100) }}</td>\r\n          <td>{{ item.region }}</td>\r\n          <td>{{ addCommas(item.pop2023) }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    \r\n   \r\n    <!--\r\n      \r\n    <p class=\"paragraph-text homeview break-text\">The functions/graphical formatting using this data table are self-made.\r\n      Click on the column titles for each column to sort data numerically/alphabetically. The graph will update to the\r\n      sorted values.\r\n      Note: all 0 values are removed for the column that is sorted. The graph now uses an SVG format output. The coffee\r\n      data itself comes from <a\r\n        href=https://worldpopulationreview.com/country-rankings/coffee-consumption-by-country>https://worldpopulationreview.com/country-rankings/coffee-consumption-by-country</a>,\r\n      but\r\n      it is being linked as JSON from a GitHub file. The values are rounded to 2 decimal places, and since values are in\r\n      lbs,\r\n      further divided by 2.20462. For example each JSON value is computed through: <span\r\n        style=\"color: #999999;\">Math.round(item.perCapitaCons2016 * 100 / 2.20462) / 100</span>.\r\n\r\n    </p>\r\n\r\n    -->\r\n    <!--\r\n\r\n    <h1 class=\"homeview\" style=\"color: #fff;\">\r\n      Convenient area to test anything else dataset related here...\r\n    </h1>\r\n    <p class=\"paragraph-text homeview break-text\">\r\n      Data as an array: {{ fileContentsArray }}\r\n      <br>\r\n      <br>\r\n      This is pulling data from <a\r\n        href=\"https://github.com/conrizzo/conradswebsite/blob/master/src/data/data.tsv\">https://github.com/conrizzo/conradswebsite/blob/master/src/data/data.tsv</a>\r\n      as a TSV file.\r\n    </p>\r\n    <br>\r\n    \r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Column 1</th>\r\n          <th>Column 2</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(line, index) in fileContentsArray\" :key=\"index\">\r\n          <td v-for=\"(field, fieldIndex) in line\" :key=\"fieldIndex\">{{ field }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n  -->\r\n  </div>\r\n\r\n  <FastQuickSort ref=\"fastQuickSort\"/>\r\n  \r\n  \r\n</template>\r\n\r\n<script>\r\nimport FastQuickSort from \"@/components/SortingAlgorithms/FastQuickSort.vue\"\r\n\r\n\r\n\r\n\r\n\r\nimport \"@/assets/globalCSS.css\";\r\n\r\nexport default {\r\n  name: \"DatasetsView\",\r\n  components: {\r\n    FastQuickSort\r\n  },\r\n  data() {\r\n    return {\r\n      fileContents: \"\",\r\n      fileContentsArray: [],\r\n      jsonData: null,\r\n      sortedData: null,\r\n      removedZeros: null,\r\n\r\n      // This function adds commas to numbers to increase readability\r\n      addCommas: function (number) {\r\n        number = number.toString();\r\n        var parts = number.split(/([\\d.]+)/g);\r\n\r\n        for (let i = 1; i < parts.length; i += 2) {\r\n          parts[i] = parts[i].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n        }\r\n        return parts.join(\"\");\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    // Text file import\r\n    const owner = \"conrizzo\";\r\n    const repo = \"conradswebsite\";\r\n    const path = \"src/data/data.tsv\";\r\n    const rawFileURL = `https://raw.githubusercontent.com/${owner}/${repo}/master/${path}`;\r\n\r\n    fetch(rawFileURL)\r\n      .then((response) => response.text())\r\n      .then((data) => {\r\n        this.fileContents = data;\r\n        this.fileContentsArray = data\r\n          .split(\"\\n\")\r\n          .map((line) => line.split(\"\\t\"));\r\n\r\n        // Check if the last field in the last line is an empty value and if it is, remove it\r\n        const lastLine =\r\n          this.fileContentsArray[this.fileContentsArray.length - 1];\r\n        if (lastLine && lastLine[lastLine.length - 1] === \"\") {\r\n          this.fileContentsArray.pop();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //error handling\r\n        this.errorMessage = 'An error occurred while fetching the data. Please try again later.' + error;\r\n      });\r\n\r\n    // JSON file import\r\n    const owner1 = \"conrizzo\";\r\n    const repo1 = \"data_sets_for_conradswebsite\";\r\n    const path1 = \"coffee_data.json\";\r\n    const rawJsonURL = `https://raw.githubusercontent.com/${owner1}/${repo1}/main/${path1}`;\r\n\r\n    fetch(rawJsonURL)\r\n      .then((response) => response.json())\r\n      .then((data2) => {\r\n        this.jsonData = data2;\r\n        this.removeZeros();\r\n        this.sortData(); // Call the sortData method here so that the data is sorted by default\r\n        this.barChart();\r\n      })\r\n      .catch((error) => {\r\n        // error handling\r\n        this.errorMessage = 'An error occurred while fetching the data. Please try again later.' + error;\r\n      });\r\n\r\n    this.sortedData = this.jsonData;\r\n  },\r\n  methods: {\r\n    quickSort(columnName){\r\n      console.log(columnName);\r\n      const columnA = [columnName];\r\n      console.log(columnA);\r\n      let array = columnA;\r\n      // set a reference to the component FastQuickSort\r\n      const fastQuickSort = this.$refs.fastQuickSort;\r\n      // Invoke the function from the component FastQuickSort\r\n      this.quickSortedArray = fastQuickSort.invoke([...array], 0, array.length - 1);  \r\n      console.log(this.quickSortedArray)  \r\n    },\r\n    // this sorts the data by a specific column\r\n    sortData(columnName) {\r\n      /*\r\n      Check if the currently sorted column is the same as the clicked column\r\n      If this.sortedColumn and columnName are the same, it means that the \r\n      currently sorted column is being clicked again. This is important because \r\n      you want to toggle the sorting direction when the same column is clicked multiple times.\r\n      */\r\n      const isSameColumn = this.sortedColumn === columnName;\r\n\r\n      // Toggle the sorting direction based on whether it's the same column or not\r\n      // The \"?\" is a ternary operator. It's a shorthand for an if/else statement\r\n      this.sortDirection = isSameColumn ? !this.sortDirection : true;\r\n\r\n      this.sortedData = this.removedZeros.slice().sort((a, b) => {\r\n        const columnA = a[columnName];\r\n        const columnB = b[columnName];\r\n\r\n        // Handle null values\r\n        if (columnA === null) return 1;\r\n        if (columnB === null) return -1;\r\n\r\n        // Handle numeric and non-numeric values\r\n        if (typeof columnA === \"number\" && typeof columnB === \"number\") {          \r\n          const result = columnB - columnA;\r\n          return this.sortDirection ? result : -result; // Reverse sorting if necessary\r\n\r\n        } else {\r\n\r\n          const strA = String(columnA).toLowerCase();\r\n          const strB = String(columnB).toLowerCase();\r\n          // localeCompare https://www.w3schools.com/jsref/jsref_localecompare.asp#:~:text=Definition%20and%20Usage,language%20settings%20of%20the%20browser.\r\n          const result = strB.localeCompare(strA);\r\n          return this.sortDirection ? result : -result; // Reverse sorting if necessary\r\n        }\r\n      });\r\n\r\n      // Store the currently sorted column\r\n      this.sortedColumn = columnName;\r\n    },\r\n    // this function removes all 0 or null values from JSON data\r\n    removeZeros(columnName = \"perCapitaCons2016\") {\r\n      this.removedZeros = this.jsonData.filter(\r\n        (item) => item[columnName] !== 0 && item[columnName] !== null\r\n      );\r\n    },\r\n    barChart(\r\n      sortType = \"perCapitaCons2016\",\r\n      title = \"Coffee Consumption Per Capita 2016 (kg)\"\r\n    ) {\r\n      // This will sort the data by the selected column for the graph\r\n      //console.log(this.sortedData);\r\n      const data = this.sortedData.map((item) => {\r\n        let value;\r\n        if (sortType === \"perCapitaCons2016\") {\r\n          value = Math.round((item.perCapitaCons2016 * 100) / 2.20462) / 100;\r\n        } else if (sortType === \"totCons2019\") {\r\n          value = Math.round((item[sortType] * 60000 * 100) / 2.20462) / 100;\r\n        } else {\r\n          value = item[sortType];\r\n        }\r\n        return {\r\n          label: `${item.country} (${this.addCommas(value)})`,\r\n          value: value,\r\n        };\r\n      });\r\n\r\n      const svgWidth = window.innerWidth * 0.95; // Set the width to 90% of the viewport width\r\n      const barHeight = 20;\r\n      const barSpacing = 4;\r\n      const maxValue = Math.max(...data.map((item) => item.value));\r\n      const scaleFactor = svgWidth / maxValue;\r\n\r\n      let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${svgWidth}\" height=\"${(barHeight + barSpacing) * data.length + 30\r\n        }\">`;\r\n\r\n      // Draw the title\r\n      svg += `<text x=\"${svgWidth / 2\r\n        }\" y=\"20\" text-anchor=\"middle\" font-size=\"17\" font-weight=\"bold\" fill=\"#fff\">${title}</text>`;\r\n\r\n      // Draw the bars and labels\r\n      let startY = 30;\r\n      for (let i = 0; i < data.length; i++) {\r\n        const item = data[i];\r\n        const barWidth = item.value * scaleFactor;\r\n\r\n        svg += `<rect x=\"0\" y=\"${startY}\" width=\"${barWidth}\" height=\"${barHeight}\" fill=\"#66ff99\" />`;\r\n        svg += `<text x=\"5\" y=\"${startY + barHeight / 2 + 6}\" font-size=\"17\">${item.label\r\n          }</text>`;\r\n\r\n        startY += barHeight + barSpacing;\r\n      }\r\n\r\n      svg += \"</svg>\";\r\n\r\n      //console.log(svg); // Output the generated SVG\r\n\r\n      // You can then use the SVG as needed, e.g., appending it to an HTML element:\r\n      document.getElementById(\"chartContainer\").innerHTML = svg;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nh2{\r\n  font-size:3em; color: rgb(60, 60, 60);\r\n  padding-top: 0.5em;\r\n}\r\n/* Table */\r\ntable {\r\n  width: calc(100% - 1em);\r\n  /* Subtract 1em from 100% to account for the 0.5em margins on both sides */\r\n  margin-left: 0.5em;\r\n  margin-right: 0.5em;\r\n  border-collapse: collapse;\r\n  \r\n}\r\n\r\n/* Table Header */\r\nthead {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\nth {\r\n  padding-right: 0em;\r\n  padding-left: 0.5em;\r\n  padding-top: 0.5em;\r\n  padding-bottom: 0.5em;\r\n  text-align: left;\r\n  border-bottom: 1px solid #ddd;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n/* Table Body */\r\ntbody {\r\n  background-color: #fff;\r\n}\r\n\r\ntd {\r\n  text-align: left;\r\n  border-bottom: 1px solid #ddd;\r\n  border-right: 1px solid #ddd;\r\n  padding-left: 0.5em;\r\n  padding-top: 0.5em;\r\n  padding-bottom: 0.5em;\r\n}\r\n\r\n/* Alternate Row Color */\r\ntr:nth-child(even) {\r\n  background-color: #ededed96;\r\n}\r\n\r\n.table-column-buttons {\r\n  background-color: #66ff99;\r\n}\r\n\r\n.table-column-buttons:hover {\r\n  background-color: #9dffbe;\r\n}\r\n\r\n@media (max-width: 50rem) {\r\n  table {\r\n    font-size: 0.7em;\r\n    padding: 0.25em;\r\n  }\r\n\r\n  h2{\r\n  font-size:1.25em; \r\n  margin-top: 1em;\r\n \r\n}\r\n\r\n  \r\n}\r\n\r\np.homeview {\r\n  padding-top: 0.75em;\r\n  padding-bottom: 0.75em;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  text-align: left;\r\n  padding-left: 0.5em;\r\n  padding-right: 0.5em;\r\n  margin-left: 0.5em;\r\n  margin-right: 0.5em;\r\n  color: #000000;\r\n  background: #fff;\r\n  border-radius: 5px;  \r\n  margin-top: 1em;\r\n}</style>\r\n","import { render } from \"./DatasetsView.vue?vue&type=template&id=3e83b5e2&scoped=true\"\nimport script from \"./DatasetsView.vue?vue&type=script&lang=js\"\nexport * from \"./DatasetsView.vue?vue&type=script&lang=js\"\n\nimport \"./DatasetsView.vue?vue&type=style&index=0&id=3e83b5e2&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-3e83b5e2\"]])\n\nexport default __exports__"],"names":["name","data","methods","invoke","array","theArray","toSort","this","getQuickSort","length","input","low","high","quickSort","inputList","Array","isArray","TypeError","pIndex","partition","partitionList","pivot","index","sortedList","__exports__","style","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_5","onClick","_cache","$event","$options","sortData","class","removeZeros","barChart","_createElementBlock","_Fragment","_renderList","$data","sortedData","item","key","_toDisplayString","country","Math","round","perCapitaCons2016","addCommas","totCons2019","region","pop2023","_createVNode","_component_FastQuickSort","ref","components","FastQuickSort","fileContents","fileContentsArray","jsonData","removedZeros","number","toString","parts","split","i","replace","join","mounted","owner","repo","path","rawFileURL","fetch","then","response","text","map","line","lastLine","pop","catch","error","errorMessage","owner1","repo1","path1","rawJsonURL","json","data2","columnName","console","log","columnA","fastQuickSort","$refs","quickSortedArray","isSameColumn","sortedColumn","sortDirection","slice","sort","a","b","columnB","result","strA","String","toLowerCase","strB","localeCompare","filter","sortType","title","value","label","svgWidth","window","innerWidth","barHeight","barSpacing","maxValue","max","scaleFactor","svg","startY","barWidth","document","getElementById","innerHTML","render"],"sourceRoot":""}